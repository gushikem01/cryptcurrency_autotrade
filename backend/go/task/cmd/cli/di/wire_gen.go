// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/gushikem01/cryptcurrency_autotrade/pkg/log"
	"github.com/gushikem01/cryptcurrency_autotrade/pkg/traders/coincheck"
	"github.com/gushikem01/cryptcurrency_autotrade/pkg/traders/coincheck/public"
	"github.com/gushikem01/cryptcurrency_autotrade/pkg/traders/gmo"
	public2 "github.com/gushikem01/cryptcurrency_autotrade/pkg/traders/gmo/public"
	"github.com/gushikem01/cryptcurrency_autotrade/pkg/traders/liquid"
	public3 "github.com/gushikem01/cryptcurrency_autotrade/pkg/traders/liquid/public"
	"github.com/gushikem01/cryptcurrency_autotrade/task/internal/app/appcobra"
	"github.com/gushikem01/cryptcurrency_autotrade/task/internal/traders/traderscobra"
)

// Injectors from wire.go:

func InilializeTask(ctx context.Context) (*appcobra.CLI, func(), error) {
	logger, err := log.NewZap()
	if err != nil {
		return nil, nil, err
	}
	repositoryPublic := public.NewRepository(logger)
	service := coincheck.NewService(logger, repositoryPublic)
	gmoRepositoryPublic := public2.NewRepository(logger)
	gmoService := gmo.NewService(logger, gmoRepositoryPublic)
	liquidRepositoryPublic := public3.NewRepository(logger)
	liquidService := liquid.NewService(logger, liquidRepositoryPublic)
	cmd := traderscobra.NewCmd(logger, service, gmoService, liquidService)
	cli := appcobra.NewCLI(cmd)
	return cli, func() {
	}, nil
}
